server {
    listen       80;
    server_name  {{ cdn_domain }};
    return 301 https://$host$request_uri;
}

server {
    listen       443 ssl;
    server_name {{ cdn_domain }};

    root        /usr/share/nginx/html;
    index       index.html index.htm;
    charset     utf-8;

    ssl on;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_certificate /etc/nginx/ssl/server.crt;
    ssl_certificate_key /etc/nginx/ssl/server.key;

#   access_log   /var/log/nginx/access.log  main;
    access_log   /var/log/nginx/cdn.access.log  ltsv;
    error_log    /var/log/nginx/cdn.error.log   error;
    rewrite_log  off;

    # additional headers
    add_header   X-Content-Type-Options  nosniff;
    add_header   X-Frame-Options         DENY;
    add_header   X-XSS-Protection        "1; mode=block";

    resolver         8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 10s;

    # access control
    set $allow "true";
#    if ($http_x_forwarded_for ~ 118\.238\.250\.236) { set $allow "true"; } # ZUU OFFICE
#    if ($http_x_forwarded_for ~ 52\.199\.194\.37)   { set $allow "true"; } # AWS NAT GW
#    if ($http_x_forwarded_for ~ 131\.213\.26\.7) { set $allow "true"; }

#   # assets control
#   include  /etc/nginx/include/assets_control;

#   # fallbacks
#   include  /etc/nginx/include/fallbacks;

#   # nginx server-status
#   include  /etc/nginx/include/server-status;

    set $disable_proxy_cache "0";
    set $cache_zone "rzone";
    if ($disable_proxy_cache) {
      set $cache_zone "off";
    }

    error_page 403 =404 @empty;
    error_page 415 =404 @empty;
    error_page 404      @empty;

    location / {
    #    if ($http_x_forwarded_proto != "https") {
    #      return 301 https://$host$request_uri;
    #    }
        if ($allow != "true") {
          return 403;
        }
        return 404;
    }

    location /assets/ {
        add_header Access-Control-Allow-Origin '*';
        add_header Access-Control-Allow-Methods 'GET, POST, PUT, DELETE, OPTIONS';
        
    #    if ($http_x_forwarded_proto != "https") {
    #      return 301 https://$host$request_uri;
    #    }
        if ($allow != "true") {
          return 403;
        }

        alias       /opt/go/src/github.com/zuu-development/papillon/static/user/assets/;
        add_header  Cache-Control  "public";
        expires     1m;
    }

    # User Origin resources
    location ~ ^/user/origin/(.*) {
    #    if ($http_x_forwarded_proto != "https") {
    #      return 301 https://$host$request_uri;
    #    }
        if ($allow != "true") {
          return 403;
        }

        set $image_path $1;
        if ($image_path !~* .(jpg)$) {
            return 404;
        }

        proxy_pass http://127.0.0.1:8000/user/origin/$image_path;
        proxy_intercept_errors on;
    }

    # Origin resources
    location ~ /origin/(.*) {
    #    if ($http_x_forwarded_proto != "https") {
    #      return 301 https://$host$request_uri;
    #    }
        if ($allow != "true") {
          return 403;
        }

        set $image_path $1;
        if ($image_path !~* .(png|gif|jpg|jpeg)$) {
            return 404;
        }

        proxy_pass http://127.0.0.1:8000/origin/$image_path;
        proxy_intercept_errors on;
    }

    location ~ /contents/(.*) {
    #    if ($http_x_forwarded_proto != "https") {
    #      return 301 https://$host$request_uri;
    #    }
        if ($allow != "true") {
          return 403;
        }

        set $image_path $1;

        proxy_pass http://127.0.0.1:8000/contents/$image_path;
        proxy_intercept_errors on;
    }

    # /user/:width/:height/:filename
    location ~ ^/user/(\d+)/(\d+)/(.*) {
    #    if ($http_x_forwarded_proto != "https") {
    #      return 301 https://$host$request_uri;
    #    }
        if ($allow != "true") {
          return 403;
        }

        set $width      $1;
        set $height     $2;
        set $image_path $3;
        if ($uri !~* .(jpg)$) {
            return 404;
        }

        proxy_intercept_errors on;
        proxy_pass             http://127.0.0.1:8000/user/resize/$image_path?width=$width&height=$height;
#        proxy_cache            $cache_zone;
#        proxy_cache_key        "/user/$width/$height/$image_path";
#        proxy_cache_valid      200 30m;
#        proxy_cache_valid      415  5m;
    }

    # /:width/:height/:filename
    location ~ ^/(\d+)/(\d+)/(.*) {
    #    if ($http_x_forwarded_proto != "https") {
    #      return 301 https://$host$request_uri;
    #    }
        if ($allow != "true") {
          return 403;
        }

        set $width      $1;
        set $height     $2;
        set $image_path $3;
        if ($uri !~* .(png|gif|jpg|jpeg)$) {
            return 404;
        }

        proxy_intercept_errors on;
        proxy_pass             http://127.0.0.1:8000/resize/$image_path?width=$width&height=$height;
#        proxy_cache            $cache_zone;
#        proxy_cache_key        "$width/$height/$image_path";
#        proxy_cache_valid      200 30m;
#        proxy_cache_valid      415  5m;
    }

    location @empty {
        empty_gif;
    }
}

server {
    listen 8000;
    server_name 127.0.0.1;

    root         /usr/share/nginx/html;
    index        index.html index.htm;
    charset      utf-8;

    error_log    /var/log/nginx/error.log  error;

    resolver         8.8.8.8 8.8.4.4;
    resolver_timeout 10s;

    set $bucket_name         "{{ cdn_backet }}";
    set $user_bucket_name    "{{ cdn_user_backet }}";
    set $disable_proxy_cache "0";
    set $proxy_cache_zone    ozone;
    if ($disable_proxy_cache) {
      set $proxy_cache_zone off;
    }

    location ~ ^/user/resize/(.*) {
        proxy_pass http://127.0.0.1:8000/user/origin/$1;
        image_filter              resize  $arg_width  $arg_height;
        image_filter_buffer       20M;
        image_filter_jpeg_quality 75;
    }

    location ~ ^/user/origin/(.*) {
        proxy_pass        https://$user_bucket_name.storage.googleapis.com/images/$1;
#        proxy_cache       $proxy_cache_zone;
#        proxy_cache_key   $1;
#        proxy_cache_valid 200 30m;
#        proxy_cache_valid 403  5m;
    }

    location ~ ^/resize/(.*) {
        proxy_pass http://127.0.0.1:8000/origin/$1;
        image_filter              resize  $arg_width  $arg_height;
        image_filter_buffer       20M;
        image_filter_jpeg_quality 75;
    }

    location ~ /origin/(.*) {
        proxy_pass        https://$bucket_name.storage.googleapis.com/images/$1;
#        proxy_cache       $proxy_cache_zone;
#        proxy_cache_key   $1;
#        proxy_cache_valid 200 30m;
#        proxy_cache_valid 403  5m;
    }

    location ~ /contents/(.*) {
        proxy_pass        https://$bucket_name.storage.googleapis.com/contents/$1;
    }
}
